name: Build and Test

on:
  push:
    branches:
    - master
  pull_request:
    branches:
    - master

jobs:
  CI:

    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: '20'

    - name: Prepare Env
      run: |
        brew install swiftlint
        pod install

    - name: Check Strings
      run: |
        for file (./HeliPort/Appearance/**/*.strings) {
          plutil -lint $file
          if [[ $file != *"zh-Hans"* ]]; then
            grep -Hn "：" $file >> /tmp/chnCol.txt
          fi
        }
        echo ""
        if [[ $(cat /tmp/chnCol.txt) != "" ]]; then
          echo "ERROR!!! Chinese Colon\"：\" exists in:"
          echo ""
          cat /tmp/chnCol.txt
          exit 1
        fi
      shell: zsh {0}

    - name: Debug Build
      run: |
        xcodebuild -workspace HeliPort.xcworkspace -scheme HeliPort -configuration Debug -derivedDataPath build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcpretty && exit ${PIPESTATUS[0]}

    - name: Release Build
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'GH release')
      run: |
        xcodebuild -workspace HeliPort.xcworkspace -scheme HeliPort -configuration Release -derivedDataPath build CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO | xcpretty && exit ${PIPESTATUS[0]}

    - name: Prepare GH Release
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'GH release')
      run: |
        XCBUILD_PATH="build/Build/Products/Release"
        brew install graphicsmagick imagemagick
        npm install --global create-dmg

        eval $(grep -m 1 "MARKETING_VERSION" HeliPort.xcodeproj/project.pbxproj | tr -d ';' | tr -d '\t' | tr -d " ")

        echo "::set-env name=NEWVER::$MARKETING_VERSION"

        # Unless this project becomes insane, there's no chance that the version number will be larger than 9.9.9
        # Don't bump version for tag since we're using keywords for releases (Drafts can't be overridden in GH Actions)
        #if [[ ${MARKETING_VERSION##*.} == 9 ]]; then
        #    if [[ ${MARKETING_VERSION:2:1} == 9 ]]; then
        #        NEWVER="$((${MARKETING_VERSION:0:1}+1)).0.0"
        #    else
        #        NEWVER="${MARKETING_VERSION:0:1}.$((${MARKETING_VERSION:2:1}+1)).0"
        #    fi
        #else
        #    NEWVER="${MARKETING_VERSION%.*}.$((${MARKETING_VERSION##*.}+1))"
        #fi

        cp LICENSE $XCBUILD_PATH
        cd $XCBUILD_PATH
        mv LICENSE LICENSE.txt
        create-dmg HeliPort.app || true
        mv *.dmg HeliPort.dmg
        cd -
        mkdir Artifacts
        cp -R ${XCBUILD_PATH}/*.dmg Artifacts
        
        git log -"20" --format="- %H %s" | grep -v 'gitignore\|Repo\|Docs\|Merge\|yml\|CI\|Commit\|commit\|attributes' | sed '/^$/d' >> ReleaseNotes.md
        #git log -"$(git rev-list --count $(git rev-list --tags | head -n 1)..HEAD)" --format="- %H %s" | grep -v 'gitignore\|Repo\|Docs\|Merge\|yml\|CI\|Commit\|commit\|attributes' | sed  '/^$/d' >> ReleaseNotes.md

      shell: zsh {0}

    - name: Init GH Release
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'GH release')
      uses: ncipollo/release-action@v1
      with:
        bodyFile: ReleaseNotes.md
        replacesArtifacts: false
        tag: "v${{ env.NEWVER }}"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate Sparkle Appcast
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'GH release')
      run: |
        mkdir sparkle
        cd sparkle
        rawURL="https://github.com/sparkle-project/Sparkle/releases/latest"
        URL="https://github.com$(one=${"$(curl -L --silent "${rawURL}" | grep '/download/' | grep -m 1 'xz' )"#*href=\"} && two=${one%\"\ rel*} && echo $two)"
        curl -#LO "${URL}"
        tar xvf *.xz >/dev/null 2>&1
        cd ..

        PUBDATE="$(date +"%a, %d %b %Y %T %z")"
        APPCAST=(
            '<?xml version="1.0" standalone="yes"?>'
            '<rss xmlns:sparkle="http://www.andymatuschak.org/xml-namespaces/sparkle" version="2.0">'
            '    <channel>'
            '        <title>HeliPort</title>'
            '        <item>'
            "            <title>${NEWVER}</title>"
            "            <pubDate>${PUBDATE}</pubDate>"
            '            <description><![CDATA['
            "                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Primer/14.4.0/primer.min.css\"><meta charset=\"UTF-8\"> $(curl -L --silent https://github.com/OpenIntelWireless/HeliPort/releases/latest | sed -n '/<div class=\"markdown-body\">/,/<\/div>/p' | tr -d '\n')"
            '            ]]>'
            '            </description>'
            "            <sparkle:minimumSystemVersion>10.12</sparkle:minimumSystemVersion>"
            "            <enclosure url=\"https://heliport.bat-bat.workers.dev/https://github.com/OpenIntelWireless/HeliPort/releases/latest/download/HeliPort.dmg\" sparkle:version=\"${NEWVER}\" sparkle:shortVersionString=\"${NEWVER}\" type=\"application/octet-stream\" $(./sparkle/bin/sign_update -s ${SPARKLE_KEY} ./Artifacts/HeliPort.dmg)/>"
            '        </item>'
            '    </channel>'
            '</rss>'
        )

        for appcast in "${APPCAST[@]}"; do
            echo "${appcast}" >> ./Artifacts/appcast.xml
        done
      shell: zsh {0}
      env:
        NEWVER: ${{ env.NEWVER }}
        SPARKLE_KEY: ${{ secrets.SPARKLE_KEY }}

    - name: GH Release
      if: github.event_name == 'push' && contains(github.event.head_commit.message, 'GH release')
      uses: ncipollo/release-action@v1
      with:
        allowUpdates: true
        replacesArtifacts: true
        bodyFile: ReleaseNotes.md
        artifacts: "./Artifacts/*"
        tag: "v${{ env.NEWVER }}"
        token: ${{ secrets.GITHUB_TOKEN }}
